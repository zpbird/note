* 安装
** 使用nvm安装指定版本node 
+ 安装
  wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.1/install.sh | bash
+ 设置
  - 查看nvm版本
    nvm --version
  - 使用nvm在情况下，npm全局安装模块不需要sudo权限，因为nvm将node所有文件都安装在了用户home的.nvm目录中
  - 配置emacs否则找不到nvm安装的nodejs模块
    (setenv "PATH" (concat "/home/zp/.nvm/versions/node/v12.13.1/bin/:" (getenv "PATH")))
    (setq exec-path (append exec-path '("/home/zp/.nvm/versions/node/v12.13.1/bin/")))
  
+ 使用
  - 查看所有可供安装的node版本
    nvm ls-remote
    nvm list available
  - 选择自己想要的版本进行安装
    nvm install v11.11.0
  - 查看本地已安装的node
    nvm ls
  - 制定使用的版本
    nvm use v11.11.0
  - 升级npm
    npm install -g npm
+ 完全卸载nvm
  - 删除nvm
    rm -rf ~/.nvm
  - 删除npm
    rm -rf ~/.npm

** linux
sudo apt install nodejs
archlinux 需要单独安装npm
** windows
* 常用命令
** 设置模块安装源
*** 手动指定
镜像使用方法（三种办法任意一种都能解决问题，建议使用第三种，将配置写死，下次用的时候配置还在）:
+ 通过config命令
  - sudo npm config set registry https://registry.npm.taobao.org 
  - npm info underscore （如果上面配置正确这个命令会有字符串response）
+ 命令行指定
  - npm --registry https://registry.npm.taobao.org info underscore 
+ 编辑 ~/.npmrc 加入下面内容
  - registry = https://registry.npm.taobao.org
*** 使用nrm
+ sudo npm install -g nrm 
+ nrm ls 列出可用的源
+ nrm use taobao 切换源
+ nrm add [home]  增加源，你可以增加定制的源，特别适用于添加企业内部的私有源
+ nrm del 删除源
+ nrm test 测试速度
** 安装模块
+ sudo npm i -g npm 升级npm
+ npm install moduleNames 本地模式安装Node模块
  - 一般情况下会以本地模式运行，包会被安装到和你的应用程序代码的本地node_modules目录下
  - 安装完毕后会产生一个node_modules目录，其目录下就是安装的各个node模块
+ sudo npm install -g moduleName 全局模式安装Node模块
  - 全局模式下，Node包会被安装到Node的安装目录下的node_modules下
+ 默认会安装express的最新版本，也可以通过在后面加版本号的方式安装指定版本，如npm install express@3.0.6
+ npm install <name> --save  
  - 安装的同时，将信息写入package.json中项目路径中如果有package.json文件时，直接使用npm install方法就可以根据dependencies配置安装所有的依赖包，这样代码提交到github时，就不用提交node_modules这个文件夹
+ npm view moduleNames 
  - 查看node模块的package.json文件夹
  - 注意事项：如果想要查看package.json文件夹下某个标签的内容，可以使用$npm view moduleName labelName
+ npm view moudleName dependencies
  - 查看包的依赖关系
+ npm view moduleName repository.url
  - 查看包的源文件地址
+ npm view moduleName engines
  - 查看包所依赖的Node的版本
+ npm help folders
  - 查看npm使用的所有文件夹
+ npm rebuild moduleName
  - 用于更改包内容后进行重建
+ npm outdated
  - 检查包是否已经过时，此命令会列出所有已经过时的包，可以及时进行包的更新
+ npm update moduleName
  - 更新node模块
+ npm uninstall moudleName
  - 卸载node模块
+ npm help json  
  - 此命令会以默认的方式打开一个网页，如果更改了默认打开程序则可能不会以网页的形式打开
+ npm search packageName 
  - 发布一个npm包的时候，需要检验某个包名是否已存在
+ npm init
  - 会引导你创建一个package.json文件，包括名称、版本、作者这些信息等
+ npm root
  - 查看当前包的安装路径
+ npm root -g
  - 查看全局的包的安装路径
  
** 查看信息
+ node -v 查看当前node的版本号
+ npm -v 查看npm安装的版本
+ npm ls 查看当前项目(目录)安装的模块
+ npm ls -global 查看全局安装的模块
+ npm get global 可以查看当前使用的安装模式，是否为全局模式
+ npm help 查看帮助命令
* 常用模块安装及配置
** webpack
*** 安装
+ 全局安装
  sudo npm install -g webpack
+ 安装到项目目录
  npm install --save-dev webpack
*** 使用及配置
+ 初始化项目
  - npm init
  - npm init命令自动创建这个package.json文件，此文件是一个标准的npm说明文件，里面蕴含了丰富的信息，包括当前项目的依赖模块，自定义的脚本任务等等
  - 输入这个命令后，终端会问你一系列诸如项目名称，项目描述，作者等信息，不过不用担心，如果你不准备在npm中发布你的模块，这些问题的答案都不重要，回车默认即可
+ 安装Webpack到项目中
  - npm install --save-dev webpack
  - 例如：在项目目录中创建两个文件夹,app文件夹和public文件夹，app文件夹用来存放原始数据和我们将写的JavaScript模块，public文件夹用来存放之后供浏览器读取的文件（包括使用webpack打包生成的js文件以及一个index.html文件）。接下来我们再创建三个文件:
    index.html --放在public文件夹中;
    Greeter.js-- 放在app文件夹中;
    main.js-- 放在app文件夹中;
** tern
*** 安装软件包
当npm安装出现警告npm WARN enoent ENOENT: no such file or directory, open 'C:\WINDOWS\system32时解决方法是
在命令行切换到C:\Program Files\nodejs\node_modules\npm,后执行npm install 
sudo npm install -g tern
sudo npm install -g js-beautify
*** 配置
**** linux
ln -s /usr/bin/nodejs  /usr/bin/node
**** windows
需要将windows/system32/中的tern相关目录添加到系统变量中
*** 使用
在项目根目录下创建.tern-project文件并配置内容例如：
#+BEGIN_SRC json
{
  "libs": [
           "browser",
           "jquery"
          ],
  "loadEagerly": [
                  "importantfile.js"
                 ],
  "plugins": {
              "requirejs": {
                            "baseURL": "./",
                            "paths": {}
                           }
             }
}
#+END_SRC
** ESlint
*** 安装
sudo npm install eslint -g
*** eslint初始化
cd /usr/local/lib/node_modules/eslint/bin
sudo eslint --init生成.eslintrc.js文件
*** 配置
**** 编写全局.eslintrc文件
***** 全局配置文件的位置
****** window
c:/users/zp
****** linux
+ 通常放在/home/zp
+ 在使用了emacs绿化方案时，放在emacs_home目录下，此时对emacs生效，但系统中其他应用使用的时/home/zp下的全局配置文件
+ 为项目服务的.eslintrc.json文件是放在项目文件夹下的
*** eslint-plugin-html配置
+ sudo npm install eslint-plugin-html -g
html/javascript-mime-types
By default, the code between <script> tags is considered as JavaScript code only if there is no type attribute or if its value matches the pattern /^(application|text)\/(x-)?(javascript|babel|ecmascript-6)$/i. You can customize the types that should be considered as JavaScript by providing one or multiple MIME types. If a MIME type starts with a /, it will be considered as a regular expression. Example:
{
    "plugins": [ "html" ],
    "settings": {
        "html/javascript-mime-types": ["text/javascript", "text/jsx"],  // also use script tags with a "text/jsx" type attribute
        "html/javascript-mime-types": "/^text\\/(javascript|jsx)$/",    // same thing
    }
}
** tsserver(typescript)补全后端
*** 安装
sudo npm install -g typescript
sudo npm install -g jquery 
typescript 这个包会安装 tsserver
jquery --save 这个包安装以后, tsserver 就不会抱怨找不到 JQuery 的 $ 符号了 
*** 配置emacs
#+BEGIN_SRC lisp
(use-package tide
  :ensure t
  :after (typescript-mode company flycheck)
  :hook ((typescript-mode . tide-setup)
         (typescript-mode . tide-hl-identifier-mode)
         (before-save . tide-format-before-save)))


或者
(require 'tide)

(dolist (hook (list
               'js2-mode-hook
               'rjsx-mode-hook
               'typescript-mode-hook
               ))
  (add-hook hook (lambda ()
                   ;; 初始化 tide
                   (tide-setup)
                   ;; 当 tsserver 服务没有启动时自动重新启动
                   (unless (tide-current-server)
                     (tide-restart-server))
                   )))
#+END_SRC
