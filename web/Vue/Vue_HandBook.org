* vue安装
** vue
sudo npm install -g vue
** @vue/cli安装设置
+ sudo npm install -g @vue/cli
+ 在用户目录中的.vuerc文件中设置为"useTaobaoRegistry": false,如果此值为真，创建项目会很慢
+ 创建项目
  - vue create 项目名称
  - vue ui
+ ~/.vuerc
  被保存的 preset 将会存在用户的 home 目录下一个名为 .vuerc 的 JSON 文件里。如果你想要修改被保存的 preset / 选项，可以编辑这个文件
+ 运行项目
  npm run serve
** 注意事项
*** core-js(可能需要升级)
+ 安装@vue/cli时会提示升级core-js
  // global version
  npm install --save core-js@3.5.0
  // version without global namespace pollution
  npm install --save core-js-pure@3.5.0
  // bundled global version
  npm install --save core-js-bundle@3.5.0

* 官方手册
** 工具
*** 兼容性
+ Vue 不支持 IE8 及以下版本，因为 Vue 使用了 IE8 无法模拟的 ECMAScript 5 特性。但它支持所有兼容 ECMAScript 5 的浏览器
*** Vue Devtools
+ 在使用 Vue 时，我们推荐在你的浏览器上安装 Vue Devtools，它允许你在一个更友好的界面中审查和调试 Vue 应用https://github.com/vuejs/vue-devtools#vue-devtools
*** 直接用<script>引入
+ 直接下载并用 <script> 标签引入，Vue 会被注册为一个全局变量
+ 在开发环境下不要使用压缩版本，不然你就失去了所有常见错误相关的警告
+ CDN
  对于生产环境，我们推荐链接到一个明确的版本号和构建文件，以避免新版本造成的不可预期的破坏
  #+BEGIN_SRC html
  <script src="https://cdn.jsdelivr.net/npm/vue@2.6.10/dist/vue.js"></script>
  #+END_SRC
*** 不同构建版本的解释
+ 	                       UMD	                   CommonJS	                          ES Module (基于构建工具使用)	         ES Module (直接用于浏览器)
  完整版	                 vue.js	                 vue.common.js	vue.esm.js	        vue.esm.browser.js
  只包含运行时版	           vue.runtime.js	         vue.runtime.common.js	            vue.runtime.esm.js	-
  完整版 (生产环境)	       vue.min.js	             -	                                -	                                   vue.esm.browser.min.js
  只包含运行时版 (生产环境)	 vue.runtime.min.js	     -	                                -	                                   -
** 介绍
*** 声明式渲染
+ Vue.js 的核心是一个允许采用简洁的模板语法来声明式地将数据渲染进 DOM 的系统
  #+BEGIN_SRC js
  <div id="app">
    {{ message }}
  </div>
  var app = new Vue({
    el: '#app',
    data: {
      message: 'Hello Vue!'
    }
  })
  #+END_SRC
+ 除了文本插值，我们还可以像这样来绑定元素特性
  #+BEGIN_SRC js
  <div id="app-2">
    <span v-bind:title="message">
      鼠标悬停几秒钟查看此处动态绑定的提示信息！
    </span>
  </div>
  var app2 = new Vue({
    el: '#app-2',
    data: {
      message: '页面加载于 ' + new Date().toLocaleString()
    }
  })
  #+END_SRC
*** 条件与循环
+ 控制切换一个元素是否显示也相当简单
  #+BEGIN_SRC js
  <div id="app-3">
    <p v-if="seen">现在你看到我了</p>
  </div>
  var app3 = new Vue({
    el: '#app-3',
    data: {
      seen: true
    }
  })
  #+END_SRC
+ v-for 指令可以绑定数组的数据来渲染一个项目列表
  #+BEGIN_SRC js
  <div id="app-4">
    <ol>
      <li v-for="todo in todos">
        {{ todo.text }}
      </li>
    </ol>
  </div>
  var app4 = new Vue({
    el: '#app-4',
    data: {
      todos: [
        { text: '学习 JavaScript' },
        { text: '学习 Vue' },
        { text: '整个牛项目' }
      ]
    }
  })
  #+END_SRC
*** 处理用户输入
+ 处理用户输入,为了让用户和你的应用进行交互，我们可以用 v-on 指令添加一个事件监听器，通过它调用在 Vue 实例中定义的方法
  #+BEGIN_SRC js
  <div id="app-5">
    <p>{{ message }}</p>
    <button v-on:click="reverseMessage">反转消息</button>
  </div>

  var app5 = new Vue({
    el: '#app-5',
    data: {
      message: 'Hello Vue.js!'
    },
    methods: {
      reverseMessage: function () {
        this.message = this.message.split('').reverse().join('')
      }
    }
  })
  #+END_SRC
+ Vue 还提供了 v-model 指令，它能轻松实现表单输入和应用状态之间的双向绑定
  #+BEGIN_SRC js
  <div id="app-6">
    <p>{{ message }}</p>
    <input v-model="message">
  </div>

  var app6 = new Vue({
    el: '#app-6',
    data: {
      message: 'Hello Vue!'
    }
  })
  #+END_SRC
*** 组件化应用构建
+ 组件系统是 Vue 的另一个重要概念，因为它是一种抽象，允许我们使用小型、独立和通常可复用的组件构建大型应用。仔细想想，几乎任意类型的应用界面都可以抽象为一个组件树[[file:Vue_HandBook_Pic/%E7%BB%84%E4%BB%B6%E6%A0%91%E5%BD%A2%E7%BB%93%E6%9E%84.tif][组件树形结构图例]]
+ 在 Vue 里，一个组件本质上是一个拥有预定义选项的一个 Vue 实例。在 Vue 中注册组件很简单
  #+BEGIN_SRC js
  // 定义名为 todo-item 的新组件
  Vue.component('todo-item', {
    template: '<li>这是个待办项</li>'
  })
  #+END_SRC
+ 我们应该能从父作用域将数据传到子组件才对。让我们来修改一下组件的定义，使之能够接受一个 prop
  #+BEGIN_SRC js
  Vue.component('todo-item', {
    // todo-item 组件现在接受一个
    // "prop"，类似于一个自定义特性。
    // 这个 prop 名为 todo。
    props: ['todo'],
    template: '<li>{{ todo.text }}</li>'
  })
  #+END_SRC
+ 现在，我们可以使用 v-bind 指令将待办项传到循环输出的每个组件中
  #+BEGIN_SRC js
  <div id="app-7">
    <ol>
      <todo-item
        v-for="item in groceryList"
        v-bind:todo="item"
        v-bind:key="item.id"
      ></todo-item>
    </ol>
  </div>
  
  Vue.component('todo-item', {
    props: ['todo'],
    template: '<li>{{ todo.text }}</li>'
  })

  var app7 = new Vue({
    el: '#app-7',
    data: {
      groceryList: [
        { id: 0, text: '蔬菜' },
        { id: 1, text: '奶酪' },
        { id: 2, text: '随便其它什么人吃的东西' }
      ]
    }
  })
  #+END_SRC
+ 在一个大型应用中，有必要将整个应用程序划分为组件，以使开发更易管理
  #+BEGIN_SRC js
  <div id="app">
    <app-nav></app-nav>
    <app-view>
      <app-sidebar></app-sidebar>
      <app-content></app-content>
    </app-view>
  </div>
  #+END_SRC
** Vue 实例
*** 创建一个 Vue 实例
+ 每个 Vue 应用都是通过用 Vue 函数创建一个新的 Vue 实例开始的
  #+BEGIN_SRC js
  var vm = new Vue({
    // 选项
  })
  #+END_SRC
+ 当创建一个 Vue 实例时，你可以传入一个选项对象, 一个 Vue 应用由一个通过 new Vue 创建的根 Vue 实例，以及可选的嵌套的、可复用的组件树组成
  根实例
  └─ TodoList
     ├─ TodoItem
     │  ├─ DeleteTodoButton
     │  └─ EditTodoButton
     └─ TodoListFooter
        ├─ ClearTodosButton
        └─ TodoListStatistics
+ 所有的 Vue 组件都是 Vue 实例，并且接受相同的选项对象 (一些根实例特有的选项除外)
*** 数据与方法
+ 当一个 Vue 实例被创建时，它将 data 对象中的所有的属性加入到 Vue 的响应式系统中。当这些属性的值发生改变时，视图将会产生“响应”，即匹配更新为新的值
  #+BEGIN_SRC js
  // 我们的数据对象
  var data = { a: 1 }

  // 该对象被加入到一个 Vue 实例中
  var vm = new Vue({
    data: data
  })

  // 获得这个实例上的属性
  // 返回源数据中对应的字段
  vm.a == data.a // => true
  
  // 设置属性也会影响到原始数据
  vm.a = 2
  data.a // => 2
  
  // ……反之亦然
  data.a = 3
  vm.a // => 3
  #+END_SRC
+ 值得注意的是只有当实例被创建时就已经存在于 data 中的属性才是响应式的
+ 也就是说如果你添加一个新的属性，比如：vm.b = 'hi'那么对 b 的改动将不会触发任何视图的更新
+ 如果你知道你会在晚些时候需要一个属性，但是一开始它为空或不存在，那么你仅需要设置一些初始值
  #+BEGIN_SRC js
  data: {
    newTodoText: '',
    visitCount: 0,
    hideCompletedTodos: false,
    todos: [],
    error: null
  }
  #+END_SRC
+ 唯一的例外是使用 Object.freeze()，这会阻止修改现有的属性，也意味着响应系统无法再追踪变化
  #+BEGIN_SRC js
  var obj = {
    foo: 'bar'
  }

  Object.freeze(obj)

  new Vue({
    el: '#app',
    data: obj
  })
  <div id="app">
    <p>{{ foo }}</p>
    <!-- 这里的 `foo` 不会更新！ -->
    <button v-on:click="foo = 'baz'">Change it</button>
  </div>
  #+END_SRC
+ 除了数据属性，Vue 实例还暴露了一些有用的实例属性与方法。它们都有前缀 $，以便与用户定义的属性区分开来
  #+BEGIN_SRC js
  var data = { a: 1 }
  var vm = new Vue({
    el: '#example',
    data: data
  })

  vm.$data === data // => true
  vm.$el === document.getElementById('example') // => true

  // $watch 是一个实例方法
  vm.$watch('a', function (newValue, oldValue) {
    // 这个回调将在 `vm.a` 改变后调用
  })
  #+END_SRC
*** 实例生命周期钩子
+ 每个 Vue 实例在被创建时都要经过一系列的初始化过程——例如，需要设置数据监听、编译模板、将实例挂载到 DOM 并在数据变化时更新 DOM 等。同时在这个过程中也会运行一些叫做生命周期钩子的函数，这给了用户在不同阶段添加自己的代码的机会
+ 比如 created 钩子可以用来在一个实例被创建之后执行代码：
  #+BEGIN_SRC js
  new Vue({
    data: {
      a: 1
    },
    created: function () {
      // `this` 指向 vm 实例
      console.log('a is: ' + this.a)
    }
  })
  // => "a is: 1"
  #+END_SRC
+ 也有一些其它的钩子，在实例生命周期的不同阶段被调用，如 mounted、updated 和 destroyed。生命周期钩子的 this 上下文指向调用它的 Vue 实例
+ 不要在选项属性或回调上使用箭头函数，比如 created: () => console.log(this.a) 或 vm.$watch('a', newValue => this.myMethod())。因为箭头函数并没有 this，this 会作为变量一直向上级词法作用域查找，直至找到为止，经常导致 Uncaught TypeError: Cannot read property of undefined 或 Uncaught TypeError: this.myMethod is not a function 之类的错误
+ [[file:Vue_HandBook_Pic/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E7%A4%BA%E6%84%8F%E5%9B%BE.tif][生命周期示意图]]
** 模板语法
*** 插值
**** 文本
+ 数据绑定最常见的形式就是使用“Mustache”语法 (双大括号) 的文本插值
  #+BEGIN_SRC js
  <span>Message: {{ msg }}</span>
  #+END_SRC
+ Mustache 标签将会被替代为对应数据对象上 msg 属性的值。无论何时，绑定的数据对象上 msg 属性发生了改变，插值处的内容都会更新
+ 通过使用 v-once 指令，你也能执行一次性地插值，当数据改变时，插值处的内容不会更新。但请留心这会影响到该节点上的其它数据绑定
  #+BEGIN_SRC js
  <span v-once>这个将不会改变: {{ msg }}</span>
  #+END_SRC
**** 原始 HTML
+ 双大括号会将数据解释为普通文本，而非 HTML 代码。为了输出真正的 HTML，你需要使用 v-html 指令
  #+BEGIN_SRC js
  <p>Using mustaches: {{ rawHtml }}</p>
  <p>Using v-html directive: <span v-html="rawHtml"></span></p>
  #+END_SRC
+ 这个 span 的内容将会被替换成为属性值 rawHtml，直接作为 HTML——会忽略解析属性值中的数据绑定。注意，你不能使用 v-html 来复合局部模板，因为 Vue 不是基于字符串的模板引擎。反之，对于用户界面 (UI)，组件更适合作为可重用和可组合的基本单位
+ 站点上动态渲染的任意 HTML 可能会非常危险，因为它很容易导致 XSS 攻击。请只对可信内容使用 HTML 插值，绝不要对用户提供的内容使用插值
**** 特性
+ Mustache 语法不能作用在 HTML 特性上，遇到这种情况应该使用 v-bind 指令
  #+BEGIN_SRC js
  <div v-bind:id="dynamicId"></div>
  #+END_SRC
+ 对于布尔特性 (它们只要存在就意味着值为 true)，v-bind 工作起来略有不同,如果 isButtonDisabled 的值是 null、undefined 或 false，则 disabled 特性甚至不会被包含在渲染出来的 <button> 元素中
  #+BEGIN_SRC js
  <button v-bind:disabled="isButtonDisabled">Button</button>
  #+END_SRC
**** 使用 JavaScript 表达式
+ 实际上，对于所有的数据绑定，Vue.js 都提供了完全的 JavaScript 表达式支持
  #+BEGIN_SRC js
  {{ number + 1 }}

  {{ ok ? 'YES' : 'NO' }}
  
  {{ message.split('').reverse().join('') }}
  
  <div v-bind:id="'list-' + id"></div>
  #+END_SRC
+ 这些表达式会在所属 Vue 实例的数据作用域下作为 JavaScript 被解析。有个限制就是，每个绑定都只能包含单个表达式，所以下面的例子都不会生效
  #+BEGIN_SRC js
  <!-- 这是语句，不是表达式 -->
  {{ var a = 1 }}

  <!-- 流控制也不会生效，请使用三元表达式 -->
  {{ if (ok) { return message } }}
  #+END_SRC
+ 模板表达式都被放在沙盒中，只能访问全局变量的一个白名单，如 Math 和 Date 。你不应该在模板表达式中试图访问用户定义的全局变量
*** 指令(Directives)
+ 指令 (Directives) 是带有 v- 前缀的特殊特性。指令特性的值预期是单个 JavaScript 表达式 (v-for 是例外情况，稍后我们再讨论)。指令的职责是，当表达式的值改变时，将其产生的连带影响，响应式地作用于 DOM
** 单文件组件
+ 在<script>标签中为了方便编辑可以导入单独.ts文件中的代码
  #+BEGIN_SRC html
  <template>
    <div  class='warpper'>
    </div>
  </template>
  <script lang="ts">
    import { Component, Prop, Vue } from 'vue-property-decorator';

    @Component
    export default class HelloWorld extends Vue {
      @Prop() private msg!: string;
    }
  </script>
  <style scoped lang='less'>  属性scoped表面下面的样式只适用于该组件，限定样式的作用域
  </style>
  #+END_SRC
* Vue CLI
** 安装
npm install -g @vue/cli
或者
yarn global add @vue/cli
查看版本
vue --version (此命令查看的时Vue CLI的版本)
** 配置文件
~/.vuerc
** 创建项目
vue create my-project
或
vue ui
** 基础
*** 快速原型开发
*** 创建项目
+ 命令
  vue create 项目名称
** 项目目录结构
+ public文件夹
  - favicon.ico： 显示在浏览器标签栏标题前面的小图标
  - index.html： 编译html文件的模板
+ src文件夹
  + assets文件夹：存放一些图片、字体等静态资源
  + components文件夹： 一些可以复用的组件存放在这里、、、，(自定义功能组件)这里存放的是开发需要的的各种组件，各个组件联系在一起组成一个完整的项目
  + router文件夹：存放VueRouter路由信息
  + store文件夹：存放Vuex状态
  + views文件夹： 页面视图vue文件存放在这里，所有的路由组件
  - App.vue  
  - main.ts 项目入口文件
  - shims-tsx.d.ts： 增加对JSX语法的类型支持的声明文件
  - shims-vue.d.ts： 用于让编译器识别.vue后缀的文件  
    
* Vue Router
** 前端路由原理
+ 目前前端路由通常使用hash来实现，hash的优点是可以兼容低版本的浏览器，即在URI中使用#，WEB服务并不会解析hash，会自动忽略#后面的内容，但JavaScript可以通过window.location.hash读取到，并加以解析相应不同路径的逻辑处理
+ HTML5新增加的history API，用来操作浏览器的session history，实现同样的功能，但需要后端的支持
+ 前端路由多应用于单页面应用(SPA)上，因为SPA基本都是前后端分离，后端自然不会为前端提供路由
+ 将SPA分割为功能合理的组件或局部页面，路由起到一个非常重要的作用，是链接单页面应用中各页面的链条
** Vue Router基本使用
*** 安装
+ 在项目根目录下使用npm安装
  npm install vue-router --save
+ 也可以在使用vue/cli创建项目时，通过选项添加vue-router
  vue create 项目名称
*** 相关目录及配置文件
+ 在项目src/router目录中的index.ts文件是路由的主配置文件，进行路由的配置
  #+BEGIN_SRC typescript
  import Vue from 'vue'
  import VueRouter from 'vue-router'
  import Home from '../views/Home.vue'
  
  Vue.use(VueRouter)
  
  const routes = [
    {
      path: '/',
      name: 'home',
      component: Home
    },
    {
      path: '/about',
      name: 'about',
      // route level code-splitting
      // this generates a separate chunk (about.[hash].js) for this route
      // which is lazy-loaded when the route is visited.
      component: () => import(/* webpackChunkName: "about" */ '../views/About.vue')
    }
  ]

  const router = new VueRouter({
    routes
  })

  export default router
  #+END_SRC
+ 在vue项目的入口文件main.ts中导入router中的index.ts文件即可使用路由配置的信息
  #+BEGIN_SRC typescript
  import Vue from 'vue'
  import App from './App.vue'
  import './registerServiceWorker'
  import router from './router'
  import store from './store'
  
  Vue.config.productionTip = false
  
  new Vue({
    router,
    store,
    render: h => h(App)
  }).$mount('#app')
  #+END_SRC
*** 建立路由
+ 一条路由有三个组成部分
  - path
  - name
  - component
    在指定组件名称时，实际上指定的是项目目录中component/组件名.vue，可以省略.vue
*** 启动路由
+ 在main.ts入口文件中导入路由模块，创建Vue实例时配置上router参数即可启动路由
  #+BEGIN_SRC typescript
  import router from './router'
  
  new Vue({
    router,
    store,
    render: h => h(App)
  }).$mount('#app')
  #+END_SRC
*** 路由重定向
+ 项目应用通常会有一个首页，默认首先打开的是首页，要跳转到哪个页面都可以设置路由路劲发生跳转；有时候也需要路由器定义全局的重定向规则，全局重定向会在匹配当前路径之前执行，重定向也是通过routes配置来完成
+ 具体示例
  #+BEGIN_SRC typescript
  const router = new VueRouter({
    routes:[
      { path:'/a', redirect:'/b' }
    ]
  })
  #+END_SRC
+ 重定向的目标也可以是一个命名的路由
  #+BEGIN_SRC typescript
  const router = new VueRouter({
    routes:[
      { path:'/a', redirect:{ name:'foo' } }
    ]
  })
  #+END_SRC
+ 重定向的目标也可以是一个方法，动态返回重定向目标
  #+BEGIN_SRC typescript
  const router = new VueRouter({
    routes:[
      { path:'/a', redirect: to => { 
        //方法接收"目标路由"作为参数
        //return重定向的"字符串路径/路径对象"
      }}
    ]
  })
  #+END_SRC
*** 路由懒加载
+ 在打包构建应用时，JavaScript包会变得非常大，影响页面加载速度，把不同路由对应的组件分割成不同的代码块，当路由被访问到时才加载对应的组件是比较高效的
+ 结合Vue的异步组件和webpack的代码分割功能，可以轻松实现路由的懒加载
+ 异步组件时Vue允许将组件定义为一个返回Promise工厂函数(该函数返回的Promise应该是resolve组件本身)，异步解析组件的定义，Vue只在组件需要渲染时触发工厂函数，并且把结构缓存起来，用于后面的再次渲染
  #+BEGIN_SRC typescript
  const Foo = () => Promise.resolve({/*组件定义对象*/})
  #+END_SRC
+ 在webpack中使用动态import语法定义代码分块点(split point)
  #+BEGIN_SRC typescript
  import('./Foo.vue') //返回Promise
  #+END_SRC
+ 结合以上两点就是定义一个能够被webpack自动进行代码分割的异步组件的过程
  #+BEGIN_SRC typescript
  const Foo = () =>import('./Foo.vue')
  #+END_SRC
+ 在路由配置中不需要改变，只需要想往常一样使用Foo组件即可
  #+BEGIN_SRC typescript
  const router = new VueRouter({
    routes:[
      {path:'foo', component:Foo }
    ]
  })
  #+END_SRC
+ 通过懒加载不会一次性加载所有组件，而是访问到组件的时候才加载，对组件比较多的应用会提高首次加载速度
  #+BEGIN_SRC typescript
  //引入组件header
  const Header =()=> import('@/component/header');
  //引入页面中的首页
  const Index =()=>import('@/pages/index');
  const Login =()=>import('@/pages/login');
  #+END_SRC
*** <router-link>
+ 此组件支持用户在具有路由功能的应用中单击导航，通过to属性可以指定目标地址，默认渲染成带有正确链接的<a>标签，通过配置tag属性可以生成别的标签
+ 当目标路由成功激活时，链接元素会自动设置一个表示激活的CSS类名
+ 语法
  #+BEGIN_SRC html
  <!-- 使用v-bind的js表达式 -->
  <router-link v-bind:to="'home'">Home</router-link>
  <!-- 渲染结果 -->
  <a href="home">Home</a>
  
  <!-- 不使用v-bind也可以，就像绑定其他属性一样 -->
  <router-link :to="'home'">Home</router-link>
  <!-- 同上 -->
  <router-link :to={path:'home'}>Home</router-link>
  
  <!-- 命名的路由 -->
  <router-link :to={name:'user', params:{ userId:123 }}>User</router-link>
  <!-- 带查询参数，下面的结果为/register?plan=private -->
  <router-link :to="{path:'register', query:{ plan:'private' }}">Register</router-link>
  #+END_SRC
+ 使用<router-link>而不使用<a href="...">的原因
  - 无论HTML5 history还是hash模式，它们表现的行为一致，所以当切换路由模式或在IE9降级使用hash模式时，无须任何改动
  - 在HTML5 history模式下，<router-link>会守卫单击事件，让浏览器不再重新加载页面
  - 在HTML5 history模式下使用base选项之后，所有的to属性都不需要写基路径
*** 路由对象属性
+ $route.path
  字符串，对应当前路由的路径，总是解析为绝对路径，如/foo/bar
+ $route.params
  一个key/value对象，包含了动态片段和全匹配片段，如果没有路由参数，就为空对象
+ $route.query
  一个key/value对象，表示URL查询参数，例如，对于路径/foo?user=1，则有$route.query.user=1；如果没有查询参数，则为空对象
+ $route.hash
  当前路由的hash值(不带#)，如果没有hash值，则为空字符串
+ $route.fullPath
  完成解析后的URL，包含查询参数和hash的完整路径
+ $route.matched
  一个数组，包含当前路由的所有嵌套路径片段的路由记录，路由记录就是routes配置数组中的对象副本(还有一些children数组)
** 页面间导航
*** router.push()
+ 语法
  router.push(location)
+ 要导航到不同的URL，则使用router.push方法，该方法会向history栈添加一个新的记录，当用户单击浏览器的后退按钮时，回到之前的URL
+ 当单击<router-link>时，会在内部调用router.push(...)方法，所有单击<router-link :to="...">等同于调用router.push(...)
+ 该方法的参数可以是一个字符串路径，也可以是一个描述地址的对象
  #+BEGIN_SRC typescript
  router.push('home') //字符串
  router.push({ path: 'home' }) //对象

  //命名的路由
  router.push({ name: 'user', params:{ userId: 123 }}) // -> /user/123
  //带查询参数，变成/register?plan=private
  router.push({path: 'register', query: { plan: 'private'}})
  //由一个页面跳转到另一个页面时，需要携带一些数据，这时就需要用到这种带参数的路由跳转方式
  #+END_SRC
*** router.replace()
+ 语法
  router.replace(location)
+ router.replace与router.push很像，唯一不同的是它不会向history栈添加新记录，而是替换掉当前的history记录
+ router.replace(...)等同于<router-link :to="..." replace>
*** router.go()
+ 语法
  router.go(n)
+ router.go方法的参数是一个整数，表示在history记录中向前进多少步或向后退多少步，类似于window.history.go(n)
  #+BEGIN_SRC typescript
  //在浏览器记录中前进一步，等同于history.forward()
  router.go(1)
  //后退一步，等同于history.back()
  router.go(-1)
  //前进三步
  router.go(3)
  //如果history记录不够，就会失败
  #+END_SRC
* Vuex
** 状态管理
+ 一个组件可以分为数据(Model)和视图(View)两部分，数据更新时，视图也会随之更新；在视图中又可以绑定一些事件，用于触发methods里指定的方法，从而可以改变数据、更新视图，这是一个组件基本的运行模式
+ 组件中的数据和方法只能在当前组件中访问和使用，其他组件是无法读取和修改，但在实际业务中，经常有跨组件共享数据的需要，Vuex就是设计用来统一管理组件状态的，它定义了一系列规范来使用和操作数据，使组件的应用更加高效
+ vuex的主要使用场景是大型单页应用，更适合多人协作的开发
** 基本用法
+ 经典的使用场景就是记录用户的登录状态
+ 安装
  npm install vuex --save
+ 可以在src文件夹中建立store目录存放整个项目需要的共享数据，新建index.ts
  #+BEGIN_SRC typescript
  import Vue from 'vue';
  import Vuex from 'vuex'
  Vue.use(vuex)
  
  export default new Vuex.Store({
      //state 存放所有的共享数据
      state: {
          count: 0
      },
      //状态变化
      mutations: {
          increment: state => state.count++,
          decrement: state => state.count--
      }
  })
  #+END_SRC
+ 在main.ts中引入store数据源，并在vue实例中使用
  #+BEGIN_SRC typescript
  import Vue from 'vue';
  import App from './App';
  import store from '@/store';
  import router from './router';

  Vue config.productionTip = false;
  new Vue({
      el: '#app',
      router,
      store,
      components: {App},
      template: '<App/>'
  })
  #+END_SRC
+ 在components文件夹下新建父组件
  #+BEGIN_SRC html
  <template>
    <div class="page">
      <p>{{count}}</p>
      <p>
        <button @click="increment">+</button>
        <button @click="decrement">-</button>
      </p>
    </div>
  </template>
  
  <script>
      export default{
           data(){
               return{};
           },
           computed: {
               count(){
                   return this.$store.state.count;
               }
           },
           methods: {
               //改变store中的状态的唯一途径就是显示的提交(commit)mutation
               increment(){
                   this.$store.commit("increment");
               },
               decrement(){
                   this.$store.commit("decrement")
               }
           }
      };
  </script>
  #+END_SRC
* UI框架
** Vuetify 
*** 安装
+ 库安装
  #+BEGIN_SRC shell
  vue create my-app
  cd my-app
  vue add vuetify
  #+END_SRC
+ 字体安装
  - 安装字体
    #+BEGIN_SRC shell
    npm install @mdi/font -D
    #+END_SRC
  - 或在线使用 Google's Roboto fon 和 Material Design Icons。安装这些软件的最简单方式是将他们的 CDN 包含在你的主 index.html 中
    #+BEGIN_SRC html
    <link href="https://fonts.googleapis.com/css?family=Roboto:100,300,400,500,700,900" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/@mdi/font@5.x/css/materialdesignicons.min.css" rel="stylesheet">
    #+END_SRC
** Quasar
http://www.quasarchs.com/start/pick-quasar-flavour
*** 安装
**** 通过Quasar CLI 
+ npm install -g @quasar/cli
*** 创建项目
+ 命令
  quasar create <folder_name>
*** 启动
+ 命令
  进入目录
  quasar dev
* 常用插件
** QRCode(二维码)
+ 安装
  npm install qrcode --save
+ 示例
  #+BEGIN_SRC html
    <template>
      <div class="hello">
          <!-- 生成二维码区域 -->
          <canvas id="canvas"></canvas>
      </div>
    </template>

    <script>
        import Vue from "vue";
        //引入qrcode插件
        import QRCode form "qrcode";
        Vue.use(QRCode);
        export default{
            data(){
                return{};
            }，
            mounted(){
                //组件挂载时，调用生成二维码函数
                this.useqrcode();
            },
            methods: {
                useqrcode(){
                    //盛放二维码的容器
                    let canvas = document.getElementById("canvas");
                    //调用函数生成二维码，参数依次为：盛放的容器、要生成的内容、回调函数
                    QRCode.toCanvas(canvas,"http://www.baidu.com", function(error){
                        if (error) {
                            console.error(error);
                        }else{
                            //成功之后可回调的函数
                            console.log("success");
                        }
                    });
                }
            }
        };
    </script>
  #+END_SRC
* 项目开发规范
** 对前端各设备css初始化同一外观
+ 在App.vue中引入下面两个文件
  #+BEGIN_SRC html
  <style lang="scss">
    @import "./assets/css/reset.css";
  </style>
  #+END_SRC
+ reset.css
  #+BEGIN_SRC css
    @import "./normalize.css";

    :root {
      --color-text: #666;
      --color-high-text: #ff5777;
      --color-text: #ff8198;
      --color-background: #fff;
      --font-size: 14px;
      --line-height: 1.5;
    }

    html {
    overflow-x:hidden;
    overflow-y:scroll;
    }
    body, dl, dt, dd, ul, ol, li, pre, form, fieldset, input, p, blockquote, th, td {
    font-weight:400;
    margin:0;
    padding:0;
    }
    h1, h2, h3, h4, h4, h5 {
    margin:0;
    padding:0;
    }
    body {
    color:#666666;
    font-family:Helvetica,Arial,sans-serif;
    }
    table {
    border-collapse:collapse;
    }
    fieldset, img {
    border:0 none;
    }
    fieldset {
    margin:0;
    padding:0;
    }
    fieldset p {
    margin:0;
    padding:0 0 0 8px;
    }
    legend {
    display:none;
    }
    address, caption, em, strong, th, i {
    font-style:normal;
    font-weight:400;
    }
    table caption {
    margin-left:-1px;
    }
    hr {
    border-bottom:1px solid #FFFFFF;
    border-top:1px solid #E4E4E4;
    border-width:1px 0;
    clear:both;
    height:2px;
    margin:5px 0;
    overflow:hidden;
    }
    ol, ul {
    list-style-image:none;
    list-style-position:outside;
    list-style-type:none;
    }
    caption, th {
    text-align:left;
    }
    q:before, q:after, blockquote:before, blockquote:after {
    content:””;
    }
    a {color: #666;display: block;text-decoration: none;}
    input {outline: none;-webkit-appearance: none;-webkit-appearance: none;-webkit-tap-highlight-color: rgba(0, 0, 0, 0);}
    /* 公共样式 */
    .flex{
        display: -webkit-box; /* Chrome 4+, Safari 3.1, iOS Safari 3.2+ */ display: -moz-box; /* Firefox 17- */  
        display: -webkit-flex; /* Chrome 21+, Safari 6.1+, iOS Safari 7+, Opera 15/16 */  
        display: -moz-flex; /* Firefox 18+ */  
        display: -ms-flexbox; /* IE 10 */  
        display: flex;
    }
    .clearfix:after {
    content: "";
    display: block;
    visibility: hidden;
    height: 0;
    clear: both;
    }
    .clearfix {zoom: 1;}
    .fl{float: left;}
    .fr{float: right;}
    /*单行溢出*/
    .one-txt-cut{
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
    }
    /*多行溢出 手机端使用*/
    .txt-cut{
    overflow : hidden;
    text-overflow: ellipsis;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    }
    /* 文字颜色 */
    .text-pink{color:#ef4562;}
    /* 文字大小 */
    .f12{font-size: 12px;}
  #+END_SRC
+ normalize.css
  #+BEGIN_SRC css
    /*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */

    /* Document
       ========================================================================== */

    /**
     ,* 1. Correct the line height in all browsers.
     ,* 2. Prevent adjustments of font size after orientation changes in iOS.
     ,*/

    html {
      line-height: 1.15; /* 1 */
      -webkit-text-size-adjust: 100%; /* 2 */
    }

    /* Sections
       ========================================================================== */

    /**
     ,* Remove the margin in all browsers.
     ,*/

    body {
      margin: 0;
    }

    /**
     ,* Render the `main` element consistently in IE.
     ,*/

    main {
      display: block;
    }

    /**
     ,* Correct the font size and margin on `h1` elements within `section` and
     ,* `article` contexts in Chrome, Firefox, and Safari.
     ,*/

    h1 {
      font-size: 2em;
      margin: 0.67em 0;
    }

    /* Grouping content
       ========================================================================== */

    /**
     ,* 1. Add the correct box sizing in Firefox.
     ,* 2. Show the overflow in Edge and IE.
     ,*/

    hr {
      box-sizing: content-box; /* 1 */
      height: 0; /* 1 */
      overflow: visible; /* 2 */
    }

    /**
     ,* 1. Correct the inheritance and scaling of font size in all browsers.
     ,* 2. Correct the odd `em` font sizing in all browsers.
     ,*/

    pre {
      font-family: monospace, monospace; /* 1 */
      font-size: 1em; /* 2 */
    }

    /* Text-level semantics
       ========================================================================== */

    /**
     ,* Remove the gray background on active links in IE 10.
     ,*/

    a {
      background-color: transparent;
    }

    /**
     ,* 1. Remove the bottom border in Chrome 57-
     ,* 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.
     ,*/

    abbr[title] {
      border-bottom: none; /* 1 */
      text-decoration: underline; /* 2 */
      text-decoration: underline dotted; /* 2 */
    }

    /**
     ,* Add the correct font weight in Chrome, Edge, and Safari.
     ,*/

    b,
    strong {
      font-weight: bolder;
    }

    /**
     ,* 1. Correct the inheritance and scaling of font size in all browsers.
     ,* 2. Correct the odd `em` font sizing in all browsers.
     ,*/

    code,
    kbd,
    samp {
      font-family: monospace, monospace; /* 1 */
      font-size: 1em; /* 2 */
    }

    /**
     ,* Add the correct font size in all browsers.
     ,*/

    small {
      font-size: 80%;
    }

    /**
     ,* Prevent `sub` and `sup` elements from affecting the line height in
     ,* all browsers.
     ,*/

    sub,
    sup {
      font-size: 75%;
      line-height: 0;
      position: relative;
      vertical-align: baseline;
    }

    sub {
      bottom: -0.25em;
    }

    sup {
      top: -0.5em;
    }

    /* Embedded content
       ========================================================================== */

    /**
     ,* Remove the border on images inside links in IE 10.
     ,*/

    img {
      border-style: none;
    }

    /* Forms
       ========================================================================== */

    /**
     ,* 1. Change the font styles in all browsers.
     ,* 2. Remove the margin in Firefox and Safari.
     ,*/

    button,
    input,
    optgroup,
    select,
    textarea {
      font-family: inherit; /* 1 */
      font-size: 100%; /* 1 */
      line-height: 1.15; /* 1 */
      margin: 0; /* 2 */
    }

    /**
     ,* Show the overflow in IE.
     ,* 1. Show the overflow in Edge.
     ,*/

    button,
    input { /* 1 */
      overflow: visible;
    }

    /**
     ,* Remove the inheritance of text transform in Edge, Firefox, and IE.
     ,* 1. Remove the inheritance of text transform in Firefox.
     ,*/

    button,
    select { /* 1 */
      text-transform: none;
    }

    /**
     ,* Correct the inability to style clickable types in iOS and Safari.
     ,*/

    button,
    [type="button"],
    [type="reset"],
    [type="submit"] {
      -webkit-appearance: button;
    }

    /**
     ,* Remove the inner border and padding in Firefox.
     ,*/

    button::-moz-focus-inner,
    [type="button"]::-moz-focus-inner,
    [type="reset"]::-moz-focus-inner,
    [type="submit"]::-moz-focus-inner {
      border-style: none;
      padding: 0;
    }

    /**
     ,* Restore the focus styles unset by the previous rule.
     ,*/

    button:-moz-focusring,
    [type="button"]:-moz-focusring,
    [type="reset"]:-moz-focusring,
    [type="submit"]:-moz-focusring {
      outline: 1px dotted ButtonText;
    }

    /**
     ,* Correct the padding in Firefox.
     ,*/

    fieldset {
      padding: 0.35em 0.75em 0.625em;
    }

    /**
     ,* 1. Correct the text wrapping in Edge and IE.
     ,* 2. Correct the color inheritance from `fieldset` elements in IE.
     ,* 3. Remove the padding so developers are not caught out when they zero out
     ,*    `fieldset` elements in all browsers.
     ,*/

    legend {
      box-sizing: border-box; /* 1 */
      color: inherit; /* 2 */
      display: table; /* 1 */
      max-width: 100%; /* 1 */
      padding: 0; /* 3 */
      white-space: normal; /* 1 */
    }

    /**
     ,* Add the correct vertical alignment in Chrome, Firefox, and Opera.
     ,*/

    progress {
      vertical-align: baseline;
    }

    /**
     ,* Remove the default vertical scrollbar in IE 10+.
     ,*/

    textarea {
      overflow: auto;
    }

    /**
     ,* 1. Add the correct box sizing in IE 10.
     ,* 2. Remove the padding in IE 10.
     ,*/

    [type="checkbox"],
    [type="radio"] {
      box-sizing: border-box; /* 1 */
      padding: 0; /* 2 */
    }

    /**
     ,* Correct the cursor style of increment and decrement buttons in Chrome.
     ,*/

    [type="number"]::-webkit-inner-spin-button,
    [type="number"]::-webkit-outer-spin-button {
      height: auto;
    }

    /**
     ,* 1. Correct the odd appearance in Chrome and Safari.
     ,* 2. Correct the outline style in Safari.
     ,*/

    [type="search"] {
      -webkit-appearance: textfield; /* 1 */
      outline-offset: -2px; /* 2 */
    }

    /**
     ,* Remove the inner padding in Chrome and Safari on macOS.
     ,*/

    [type="search"]::-webkit-search-decoration {
      -webkit-appearance: none;
    }

    /**
     ,* 1. Correct the inability to style clickable types in iOS and Safari.
     ,* 2. Change font properties to `inherit` in Safari.
     ,*/

    ::-webkit-file-upload-button {
      -webkit-appearance: button; /* 1 */
      font: inherit; /* 2 */
    }

    /* Interactive
       ========================================================================== */

    /*
     ,* Add the correct display in Edge, IE 10+, and Firefox.
     ,*/

    details {
      display: block;
    }

    /*
     ,* Add the correct display in all browsers.
     ,*/

    summary {
      display: list-item;
    }

    /* Misc
       ========================================================================== */

    /**
     ,* Add the correct display in IE 10+.
     ,*/

    template {
      display: none;
    }

    /**
     ,* Add the correct display in IE 10.
     ,*/

    [hidden] {
      display: none;
    }
  #+END_SRC
** 设置路径别名(可选，编辑器的路径提示不支持)
+ 在项目根目录下创建vue.config.js
  #+BEGIN_SRC js
  module.exports = {
      configureWebpack: {
        resolve: {
          alias: {
            'assets': '@/assets',
            'components': '@/components',
            'network': '@/network',
            'views': '@/views'
          }
        }
      }
  }

  #+END_SRC
** 使用axios请求数据
+ 安装
  npm install axios --save
