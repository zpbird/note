* Emacs
** Basic Keybindings
*** 常用快捷键
   - C-g        退出当前命令
   - q          退出下方功能性的Buffer
   - C-h        查看帮助信息
     C-h k      查看快捷键绑定
     C-h f      查看函数帮助信息
     C-h v      查看变量帮助信息
     C-h m      查看当前buffer开启的所有mode
   - C-c C-t    设置成TODO项目
   - C-x C-r    打开最近编辑过的文件列表
   - M-m h SPC  spacemacs帮助信息
*** 光标定位
*** 标记
** Configuration File
 1. Emacs 的配置文件默认保存在 ~/.emacs.d/init.el 文件中。如果其不存在可自行创建， 配置文件也可保存在 ~/.emacs 文件中
    注意： 如果希望把配置放在 ~/.emacs.d/init.el 文件中，那么需要手工删除 ~/.emacs 文件。
 2. linux下指定配置文件的位置
    1. 在/usr/share/emacs/25.2/site-lisp/目录中创建site-start.el文件
    2. 在此文件中添加指定配置文件位置语句
       (setenv "HOME" "/store/zpbird/software/emacs/emacs_home/")
 3. windows指定配置文件位置修改注册表比较方便
** Manage Emacs Packages
** Elisp
*** 使用scratch缓冲区可以编写、执行Elisp代码
*** C-x C-e 执行代码
*** Elisp 中并没有命名空间（Namespace），所有的变量均为全局变量，所以其命名方法就变的非常重要
#自定义变量可以使用自己的名字作为命名方式（可以是变量名或者函数名）
my/XXXX
#模式命名规则
ModeName-mode
#模式内的变量则可以使用
ModeName-VariableName
遵守上面的命名规则可以最大程度的减少命名冲突发生的可能性。
*** Lisp 的宏（Macro）
**** Macro类似于 C++ 中的模板，并可以生产新的代码使用它我们可以增强某个函数的功能而不去更改这个函数的代码
**** Macro与函数的区别
***** 传给Macro的参数不会马上执行，而是在Macro内部展开之后，elisp解析器才会执行这个Macro
***** 函数执行完毕返回的是一个值，而Macro返回的是一个表达式，而这个表达式会立即执行
** Org-mode 
*** 配置 
**** 设置层级星号的样式
customize-group -> org-bullets
*** 在org中插入、编辑代码
**** 直接开启新的缓冲区(默认会打开多个buffer，管理起来会非常混了)
在 Org-mode 中你可以直接开启新的缓冲区（Buffer）直接用相应的 Major Mode 来编辑代码块内的内容。在代码块中使用 C-c ' 会直接打开对应模式的缓冲区（不仅限于 Lisp）。
这样就使在 Org-mode 中编辑代码变的十分方便快捷。
**** 使用 <s 然后 Tab 可以直接插入代码块的代码片段（Snippet），更多类似的代码片段 （Org-mode Easy Templates）可以在这里找到。
;;#+BEGIN_SRC emacs-lisp
;; Your code goes here
;; 你的代码写在这里
;;#+END_SRC
**** 添加 Org-mode 文本内语法高亮
(require 'org)
(setq org-src-fontify-natively t)
*** 在Org-mode中重置有序列表序号可以直接使用 M-<RET>
** Dired Mode
*** Dired Mode 是一个强大的模式它能让我们完成和文件管理相关的所有操作
*** 使用C-x d就可以进入Dired Mode,这个模式类似于图形界面系统中的资源管理器。
创建目录
g 刷新目录
C 拷贝
D 删除
R 重命名
d 标记删除
u 取消标记
x 执行所有的标记
*** 几点可以优化的地方
**** 设定为默认递归删除目录
(setq dired-recursive-deletes 'always)
(setq dired-recursive-copies 'always)
**** 重用唯一的一个缓冲区作为 Dired Mode 显示专用缓冲区 
(put 'dired-find-alternate-file 'disabled nil)
;; 主动加载 Dired Mode
(require 'dired)
(defined-key dired-mode-map (kbd "RET") 'dired-find-alternate-file)
;; 延迟加载
(with-eval-after-load 'dired
(define-key dired-mode-map (kbd "RET") 'dired-find-alternate-file))
**** 延迟加载可以使编辑器加载速度有所提升
启用dired-x可以让每一次进入Dired模式时,使用新的快捷键C-x C-j就可以进入当前文件夹的所在的路径
(require 'dired-x)
** Major与Minor Mode详解
*** 每一个文件类型都对应一个Major Mode,它提供语法高亮以及缩进等基本的编辑支持功能,然后而Minor Mode则提供其余的增强性的功能（例如linum-mode）
*** 在Emacs中,Major Mode又分为三种
text-mode ，用于编辑文本文件
special-mode ，特殊模式（很少见）
prog-mode ，所有的编程语言的父模式
*** 在每一个模式（mode）中它的名称与各个变量还有函数都是有特定的命名规则，比如所有的 模式都被命名为 ModeName-mode ，里面所设置的快捷键则为 ModeName-mode-key-map ，而所有的钩子则会被命名为 ModeName-mode-hook
* Resource
** http://www.gnuemacs.org/ emacs官网
** https://melpa.org/ 插件库
** http://spacemacs.org/ spacemacs官网
** https://github.com/syl20bnr/spacemacs spacemacs官方github
** C-h t 自带手册
** https://learnxinyminutes.com/docs/elisp/ Elisp入门
https://learnxinyminutes.com/docs/zh-cn/elisp-cn/ 中文版
** M-x info选择Emacs Lisp Intro深入学习
** https://zilongshanren.com/ 子龙山人
** http://stackoverflow.com/ 论坛查找解决方案
* Mirrors
** 国内
http://elpa.emacs-china.org/melpa/
http://elpa.emacs-china.org/gnu/
http://elpa.emacs-china.org/org/
** 国外
http://www.mirrorservice.org/sites/melpa.org/packages/
https://www.mirrorservice.org/sites/melpa.org/packages/
http://www.mirrorservice.org/sites/stable.melpa.org/packages/
https://www.mirrorservice.org/sites/stable.melpa.org/packages/
* Git
